PROJECT=cudgx
GOPATH ?= $(shell go env GOPATH)
P=8


# Ensure GOPATH is set before running build process.
ifeq "$(GOPATH)" ""
  $(error Please set the environment variable GOPATH before running `make`)
endif

FAIL_ON_STDOUT := awk '{ print } END { if (NR > 0) { exit 1 } }'

CURDIR := $(shell pwd)

GO              := GO111MODULE=on go
GOBUILD         := $(GO) build $(BUILD_FLAG) -tags codes
GOBUILDCOVERAGE := GOPATH=$(GOPATH)  $(GO) test -coverpkg="../..." -c .
GOTEST          := $(GO) test -p $(P)
OVERALLS        := GO111MODULE=on overalls
STATICCHECK     := GO111MODULE=on staticcheck
CUDGX_EDITION    ?= Community

ifneq "$(CUDGX_EDITION)" "Community"
ifneq "$(CUDGX_EDITION)" "Enterprise"
  $(error Please set the correct environment variable TIDB_EDITION before running `make`)
endif
endif


ARCH      := "`uname -s`"
LINUX     := "Linux"
MAC       := "Darwin"


PACKAGE_LIST  := go list ./...

PACKAGE_LIST_CUDGX_TESTS  := go list ./...
PACKAGES  ?= $$($(PACKAGE_LIST))
PACKAGES_CUDGX_TESTS ?= $$($(PACKAGE_LIST_CUDGX_TESTS))
PACKAGE_DIRECTORIES := $(PACKAGE_LIST) | sed 's|github.com/galaxy-future/$(PROJECT)/||'
PACKAGE_DIRECTORIES_CUDGX_TESTS := $(PACKAGE_LIST_CUDGX_TESTS) | sed 's|github.com/galaxy-future/$(PROJECT)/||'
FILES     := $$(find $$($(PACKAGE_DIRECTORIES)) -name "*.go")
FILES_TIDB_TESTS := $$(find $$($(PACKAGE_DIRECTORIES_CUDGX_TESTS)) -name "*.go")

UNCONVERT_PACKAGES_LIST := go list ./...| grep -vE "lightning\/checkpoints|lightning\/manual|lightning\/common"
UNCONVERT_PACKAGES := $$($(UNCONVERT_PACKAGES_LIST))

FAILPOINT_ENABLE  := find $$PWD/ -type d | grep -vE "(\.git|tools)" | xargs tools/bin/failpoint-ctl enable
FAILPOINT_DISABLE := find $$PWD/ -type d | grep -vE "(\.git|tools)" | xargs tools/bin/failpoint-ctl disable

LDFLAGS += -X "github.com/galaxy-future/cudgx/cudgx.ReleaseVersion=$(shell git describe --tags --dirty --always)"
LDFLAGS += -X "github.com/galaxy-future/cudgx/util/versioninfo.BuildTS=$(shell date -u '+%Y-%m-%d %H:%M:%S')"
LDFLAGS += -X "github.com/galaxy-future/cudgx/util/versioninfo.GitHash=$(shell git rev-parse HEAD)"
LDFLAGS += -X "github.com/galaxy-future/cudgx/util/versioninfo.GitBranch=$(shell git rev-parse --abbrev-ref HEAD)"
LDFLAGS += -X "github.com/galaxy-future/cudgx/util/versioninfo.Edition=$(CUDGX_EDITION)"

CHECK_LDFLAGS += $(LDFLAGS) ${TEST_LDFLAGS}

TARGET = ""

VB_FILE =
VB_FUNC =

RACE_FLAG =
ifeq ("$(WITH_RACE)", "1")
	RACE_FLAG = -race
	GOBUILD   = GOPATH=$(GOPATH) $(GO) build
endif


CHECK_FLAG =
ifeq ("$(WITH_CHECK)", "1")
	CHECK_FLAG = $(TEST_LDFLAGS)
endif

IMAGE_VERSION=v0.4




